リーダブルコード開発ガイドライン
理解しやすいコード

他の人が最短時間で理解できるように書く。コードを読む人の視点を意識する。
名前に情報を詰め込む

汎用的な名前 (tmp, size, get) を避け、明確な単語を使用する。
例: getPage() → downloadPage(), size() → height() など。
単位を名前に追加し、意味を明確にする。
例: delay → delay_secs, size → size_mb。
誤解されない名前

filter, clip, length などは曖昧な表現を避ける。
例: filter → select, clip → truncate（最大文字数に切り詰める場合）。
ブール値は is, has, can, should などの接頭辞を使用。
例: read_password → need_password。
美しいレイアウト

一貫性のあるレイアウトと読み手が慣れているパターンを使用する。
似た処理はまとめてブロックにする。
コメントの使い方

WHAT・HOW ではなく WHY を記述。コードの意図や理由を説明する。
コードから明らかな内容のコメントは避ける。
アノテーション:
TODO: 後で修正・追加が必要
FIXME: 既知の不具合
HACK: 綺麗ではないが必要なコード
OPTIMIZE: 最適化が必要
制御フローを読みやすく

条件は否定形より肯定形 (if (!debug) → if (debug))。
関数内で早めに返す（ガード節を活用）。
三項演算子は簡潔な場合のみに使用。
変数の扱い

グローバル変数を避け、スコープをできるだけ縮小する。
変数は const や final を使い、できる限りイミュータブルにする。
関数の分割

巨大な関数や式は小さく分割し、説明変数や要約変数を活用。
例: final boolean user_owns_document = (request.user.id == document.owner_id);
一度に1つのことを行う

各関数は1つのタスクに集中し、複雑なロジックを避ける。
コードの軽量化

冗長なコードを削除し、シンプルかつ短いコードを目指す。
未使用の機能や重複コードは削除する。
テストの書き方

テストは読みやすく、保守しやすいものにする。
テストケースはシンプルかつ理解しやすい入力値を使用する。